// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	pq "github.com/lib/pq"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeUserInternalAppModels(in *jlexer.Lexer, out *UserInfoList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UserInfoList, 0, 0)
			} else {
				*out = UserInfoList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 UserInfo
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeUserInternalAppModels(out *jwriter.Writer, in UserInfoList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfoList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeUserInternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfoList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeUserInternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfoList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeUserInternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfoList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeUserInternalAppModels(l, v)
}
func easyjson9e1087fdDecodeUserInternalAppModels1(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "name_surname":
			out.NameSurname = string(in.String())
		case "about":
			out.About = string(in.String())
		case "specializes":
			if in.IsNull() {
				in.Skip()
				out.Specializes = nil
			} else {
				in.Delim('[')
				if out.Specializes == nil {
					if !in.IsDelim(']') {
						out.Specializes = make(pq.StringArray, 0, 4)
					} else {
						out.Specializes = pq.StringArray{}
					}
				} else {
					out.Specializes = (out.Specializes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Specializes = append(out.Specializes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "executor":
			out.Executor = bool(in.Bool())
		case "img":
			out.Img = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "reviews_count":
			out.ReviewCount = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeUserInternalAppModels1(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"name_surname\":"
		out.RawString(prefix)
		out.String(string(in.NameSurname))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"specializes\":"
		out.RawString(prefix)
		if in.Specializes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Specializes {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Executor {
		const prefix string = ",\"executor\":"
		out.RawString(prefix)
		out.Bool(bool(in.Executor))
	}
	if in.Img != "" {
		const prefix string = ",\"img\":"
		out.RawString(prefix)
		out.String(string(in.Img))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"reviews_count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ReviewCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeUserInternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeUserInternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeUserInternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeUserInternalAppModels1(l, v)
}
func easyjson9e1087fdDecodeUserInternalAppModels2(in *jlexer.Lexer, out *UserBasicInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "about":
			out.About = string(in.String())
		case "executor":
			out.Executor = bool(in.Bool())
		case "login":
			out.Login = string(in.String())
		case "name_surname":
			out.NameSurname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeUserInternalAppModels2(out *jwriter.Writer, in UserBasicInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"executor\":"
		out.RawString(prefix)
		out.Bool(bool(in.Executor))
	}
	if in.Login != "" {
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	if in.NameSurname != "" {
		const prefix string = ",\"name_surname\":"
		out.RawString(prefix)
		out.String(string(in.NameSurname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserBasicInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeUserInternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserBasicInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeUserInternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserBasicInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeUserInternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserBasicInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeUserInternalAppModels2(l, v)
}
func easyjson9e1087fdDecodeUserInternalAppModels3(in *jlexer.Lexer, out *SuggestUsersTittleList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SuggestUsersTittleList, 0, 4)
			} else {
				*out = SuggestUsersTittleList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 SuggestUsersTittle
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeUserInternalAppModels3(out *jwriter.Writer, in SuggestUsersTittleList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SuggestUsersTittleList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeUserInternalAppModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuggestUsersTittleList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeUserInternalAppModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuggestUsersTittleList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeUserInternalAppModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuggestUsersTittleList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeUserInternalAppModels3(l, v)
}
func easyjson9e1087fdDecodeUserInternalAppModels4(in *jlexer.Lexer, out *SuggestUsersTittle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeUserInternalAppModels4(out *jwriter.Writer, in SuggestUsersTittle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuggestUsersTittle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeUserInternalAppModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuggestUsersTittle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeUserInternalAppModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuggestUsersTittle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeUserInternalAppModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuggestUsersTittle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeUserInternalAppModels4(l, v)
}
func easyjson9e1087fdDecodeUserInternalAppModels5(in *jlexer.Lexer, out *NewUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "name_surname":
			out.NameSurname = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "about":
			out.About = string(in.String())
		case "specializes":
			if in.IsNull() {
				in.Skip()
				out.Specializes = nil
			} else {
				in.Delim('[')
				if out.Specializes == nil {
					if !in.IsDelim(']') {
						out.Specializes = make(pq.StringArray, 0, 4)
					} else {
						out.Specializes = pq.StringArray{}
					}
				} else {
					out.Specializes = (out.Specializes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Specializes = append(out.Specializes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Executor":
			out.Executor = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeUserInternalAppModels5(out *jwriter.Writer, in NewUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"name_surname\":"
		out.RawString(prefix)
		out.String(string(in.NameSurname))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"specializes\":"
		out.RawString(prefix)
		if in.Specializes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Specializes {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Executor\":"
		out.RawString(prefix)
		out.Bool(bool(in.Executor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeUserInternalAppModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeUserInternalAppModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeUserInternalAppModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeUserInternalAppModels5(l, v)
}
func easyjson9e1087fdDecodeUserInternalAppModels6(in *jlexer.Lexer, out *ChangeUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "name_surname":
			out.NameSurname = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		case "about":
			out.About = string(in.String())
		case "specializes":
			if in.IsNull() {
				in.Skip()
				out.Specializes = nil
			} else {
				in.Delim('[')
				if out.Specializes == nil {
					if !in.IsDelim(']') {
						out.Specializes = make(pq.StringArray, 0, 4)
					} else {
						out.Specializes = pq.StringArray{}
					}
				} else {
					out.Specializes = (out.Specializes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Specializes = append(out.Specializes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "executor":
			out.Executor = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeUserInternalAppModels6(out *jwriter.Writer, in ChangeUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Login != "" {
		const prefix string = ",\"login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	if in.NameSurname != "" {
		const prefix string = ",\"name_surname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NameSurname))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.NewPassword != "" {
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	if len(in.Specializes) != 0 {
		const prefix string = ",\"specializes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Specializes {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.Executor {
		const prefix string = ",\"executor\":"
		out.RawString(prefix)
		out.Bool(bool(in.Executor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeUserInternalAppModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeUserInternalAppModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeUserInternalAppModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeUserInternalAppModels6(l, v)
}
