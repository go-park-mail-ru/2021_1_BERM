// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2f096870DecodeUserInternalAppModels(in *jlexer.Lexer, out *UserReviews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name_surname":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "reviews":
			if in.IsNull() {
				in.Skip()
				out.Reviews = nil
			} else {
				in.Delim('[')
				if out.Reviews == nil {
					if !in.IsDelim(']') {
						out.Reviews = make([]Review, 0, 0)
					} else {
						out.Reviews = []Review{}
					}
				} else {
					out.Reviews = (out.Reviews)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Review
					(v1).UnmarshalEasyJSON(in)
					out.Reviews = append(out.Reviews, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeUserInternalAppModels(out *jwriter.Writer, in UserReviews) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name_surname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"reviews\":"
		out.RawString(prefix)
		if in.Reviews == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Reviews {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserReviews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeUserInternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserReviews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeUserInternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserReviews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeUserInternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserReviews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeUserInternalAppModels(l, v)
}
func easyjson2f096870DecodeUserInternalAppModels1(in *jlexer.Lexer, out *UserReviewInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReviewCount":
			out.ReviewCount = uint64(in.Uint64())
		case "Rating":
			out.Rating = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeUserInternalAppModels1(out *jwriter.Writer, in UserReviewInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ReviewCount\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ReviewCount))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserReviewInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeUserInternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserReviewInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeUserInternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserReviewInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeUserInternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserReviewInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeUserInternalAppModels1(l, v)
}
func easyjson2f096870DecodeUserInternalAppModels2(in *jlexer.Lexer, out *Review) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user":
			out.UserId = uint64(in.Uint64())
		case "to_user":
			out.ToUserId = uint64(in.Uint64())
		case "order_id":
			out.OrderId = uint64(in.Uint64())
		case "text":
			out.Description = string(in.String())
		case "score":
			out.Score = uint8(in.Uint8())
		case "order_name":
			out.OrderName = string(in.String())
		case "user_login":
			out.UserLogin = string(in.String())
		case "user_name_surname":
			out.UserNameSurname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeUserInternalAppModels2(out *jwriter.Writer, in Review) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UserId))
	}
	{
		const prefix string = ",\"to_user\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ToUserId))
	}
	{
		const prefix string = ",\"order_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.OrderId))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Score))
	}
	if in.OrderName != "" {
		const prefix string = ",\"order_name\":"
		out.RawString(prefix)
		out.String(string(in.OrderName))
	}
	if in.UserLogin != "" {
		const prefix string = ",\"user_login\":"
		out.RawString(prefix)
		out.String(string(in.UserLogin))
	}
	if in.UserNameSurname != "" {
		const prefix string = ",\"user_name_surname\":"
		out.RawString(prefix)
		out.String(string(in.UserNameSurname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Review) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeUserInternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Review) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeUserInternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Review) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeUserInternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Review) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeUserInternalAppModels2(l, v)
}
