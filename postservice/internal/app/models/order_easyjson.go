// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson120d1ca2DecodePostInternalAppModels(in *jlexer.Lexer, out *SuggestOrderTitleList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SuggestOrderTitleList, 0, 4)
			} else {
				*out = SuggestOrderTitleList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 SuggestOrderTitle
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodePostInternalAppModels(out *jwriter.Writer, in SuggestOrderTitleList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SuggestOrderTitleList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodePostInternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuggestOrderTitleList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodePostInternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuggestOrderTitleList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodePostInternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuggestOrderTitleList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodePostInternalAppModels(l, v)
}
func easyjson120d1ca2DecodePostInternalAppModels1(in *jlexer.Lexer, out *SuggestOrderTitle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodePostInternalAppModels1(out *jwriter.Writer, in SuggestOrderTitle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuggestOrderTitle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodePostInternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuggestOrderTitle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodePostInternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuggestOrderTitle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodePostInternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuggestOrderTitle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodePostInternalAppModels1(l, v)
}
func easyjson120d1ca2DecodePostInternalAppModels2(in *jlexer.Lexer, out *OrderSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keyword":
			out.Keyword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodePostInternalAppModels2(out *jwriter.Writer, in OrderSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keyword\":"
		out.RawString(prefix[1:])
		out.String(string(in.Keyword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderSearch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodePostInternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodePostInternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderSearch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodePostInternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodePostInternalAppModels2(l, v)
}
func easyjson120d1ca2DecodePostInternalAppModels3(in *jlexer.Lexer, out *OrderList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(OrderList, 0, 0)
			} else {
				*out = OrderList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Order
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodePostInternalAppModels3(out *jwriter.Writer, in OrderList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v OrderList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodePostInternalAppModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodePostInternalAppModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodePostInternalAppModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodePostInternalAppModels3(l, v)
}
func easyjson120d1ca2DecodePostInternalAppModels4(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "order_name":
			out.OrderName = string(in.String())
		case "customer_id":
			out.CustomerID = uint64(in.Uint64())
		case "executor_id":
			out.ExecutorID = uint64(in.Uint64())
		case "budget":
			out.Budget = uint64(in.Uint64())
		case "deadline":
			out.Deadline = uint64(in.Uint64())
		case "description":
			out.Description = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "user_login":
			out.UserLogin = string(in.String())
		case "user_img":
			out.UserImg = string(in.String())
		case "is_archived":
			out.IsArchived = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodePostInternalAppModels4(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.OrderName != "" {
		const prefix string = ",\"order_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderName))
	}
	if in.CustomerID != 0 {
		const prefix string = ",\"customer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CustomerID))
	}
	if in.ExecutorID != 0 {
		const prefix string = ",\"executor_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ExecutorID))
	}
	if in.Budget != 0 {
		const prefix string = ",\"budget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Budget))
	}
	if in.Deadline != 0 {
		const prefix string = ",\"deadline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Deadline))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	if in.UserLogin != "" {
		const prefix string = ",\"user_login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserLogin))
	}
	if in.UserImg != "" {
		const prefix string = ",\"user_img\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserImg))
	}
	{
		const prefix string = ",\"is_archived\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsArchived))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodePostInternalAppModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodePostInternalAppModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodePostInternalAppModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodePostInternalAppModels4(l, v)
}
