// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	pq "github.com/lib/pq"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels(in *jlexer.Lexer, out *UserBasicInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "executor":
			out.Executor = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels(out *jwriter.Writer, in UserBasicInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"executor\":"
		out.RawString(prefix)
		out.Bool(bool(in.Executor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserBasicInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserBasicInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserBasicInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserBasicInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels(l, v)
}
func easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels1(in *jlexer.Lexer, out *NewUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "name_surname":
			out.NameSurname = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "about":
			out.About = string(in.String())
		case "specializes":
			if in.IsNull() {
				in.Skip()
				out.Specializes = nil
			} else {
				in.Delim('[')
				if out.Specializes == nil {
					if !in.IsDelim(']') {
						out.Specializes = make(pq.StringArray, 0, 4)
					} else {
						out.Specializes = pq.StringArray{}
					}
				} else {
					out.Specializes = (out.Specializes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Specializes = append(out.Specializes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Executor":
			out.Executor = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels1(out *jwriter.Writer, in NewUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"name_surname\":"
		out.RawString(prefix)
		out.String(string(in.NameSurname))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	if len(in.Specializes) != 0 {
		const prefix string = ",\"specializes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Specializes {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Executor\":"
		out.RawString(prefix)
		out.Bool(bool(in.Executor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels1(l, v)
}
func easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels2(in *jlexer.Lexer, out *LoginUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Email":
			out.Email = string(in.String())
		case "Password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels2(out *jwriter.Writer, in LoginUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeAuthorizationserviceInternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeAuthorizationserviceInternalAppModels2(l, v)
}
